// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/bs-jest/src/jest.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ScrollLockController$ScrollLockController from "../src/ScrollLockController.bs.js";

function beforeEach$1(prim) {
  beforeEach(function () {
        return Curry._1(prim, undefined);
      });
  
}

function mock(prim) {
  jest.mock(prim);
  
}

var expect = Jest.Expect.expect;

jest.mock("body-scroll-lock");

Jest.describe("ScrollLockController", (function (param) {
        return Jest.describe("Test onBodyScrollLock callback", (function (param) {
                      var mockOnBodyScrollLockRef = {
                        contents: undefined
                      };
                      var scrollLockControllerRef = {
                        contents: undefined
                      };
                      var targetElement1Ref = {
                        contents: undefined
                      };
                      beforeEach(function () {
                            var mockOnBodyScrollLock = jest.fn(function (param) {
                                  
                                });
                            mockOnBodyScrollLockRef.contents = Caml_option.some(mockOnBodyScrollLock);
                            scrollLockControllerRef.contents = ScrollLockController$ScrollLockController.make(mockOnBodyScrollLock, undefined, undefined);
                            targetElement1Ref.contents = Caml_option.some(document.createElement("div"));
                            
                          });
                      Jest.test("Isn't called right after creation", (function (param) {
                              var match = mockOnBodyScrollLockRef.contents;
                              var match$1 = scrollLockControllerRef.contents;
                              if (match === undefined) {
                                return Jest.fail("Prepare stage failed");
                              }
                              if (match$1 === undefined) {
                                return Jest.fail("Prepare stage failed");
                              }
                              var __x = expect(Jest.MockJs.calls(Caml_option.valFromOption(match)).length);
                              return Jest.Expect.toBe(0, __x);
                            }));
                      Jest.test("Is called after first lock", (function (param) {
                              var match = mockOnBodyScrollLockRef.contents;
                              var match$1 = scrollLockControllerRef.contents;
                              var match$2 = targetElement1Ref.contents;
                              if (match === undefined) {
                                return Jest.fail("Prepare stage failed");
                              }
                              if (match$1 === undefined) {
                                return Jest.fail("Prepare stage failed");
                              }
                              if (match$2 === undefined) {
                                return Jest.fail("Prepare stage failed");
                              }
                              ScrollLockController$ScrollLockController.lock(match$1, Caml_option.valFromOption(match$2));
                              var __x = expect(Jest.MockJs.calls(Caml_option.valFromOption(match)).length);
                              return Jest.Expect.toBe(1, __x);
                            }));
                      Jest.test("Isn't called once again after unlock", (function (param) {
                              var match = mockOnBodyScrollLockRef.contents;
                              var match$1 = scrollLockControllerRef.contents;
                              var match$2 = targetElement1Ref.contents;
                              if (match === undefined) {
                                return Jest.fail("Prepare stage failed");
                              }
                              if (match$1 === undefined) {
                                return Jest.fail("Prepare stage failed");
                              }
                              if (match$2 === undefined) {
                                return Jest.fail("Prepare stage failed");
                              }
                              var targetElement1 = Caml_option.valFromOption(match$2);
                              ScrollLockController$ScrollLockController.lock(match$1, targetElement1);
                              ScrollLockController$ScrollLockController.unlock(match$1, targetElement1);
                              var __x = expect(Jest.MockJs.calls(Caml_option.valFromOption(match)).length);
                              return Jest.Expect.toBe(1, __x);
                            }));
                      Jest.test("Is called once again after second lock", (function (param) {
                              var match = mockOnBodyScrollLockRef.contents;
                              var match$1 = scrollLockControllerRef.contents;
                              var match$2 = targetElement1Ref.contents;
                              if (match === undefined) {
                                return Jest.fail("Prepare stage failed");
                              }
                              if (match$1 === undefined) {
                                return Jest.fail("Prepare stage failed");
                              }
                              if (match$2 === undefined) {
                                return Jest.fail("Prepare stage failed");
                              }
                              var targetElement1 = Caml_option.valFromOption(match$2);
                              ScrollLockController$ScrollLockController.lock(match$1, targetElement1);
                              ScrollLockController$ScrollLockController.unlock(match$1, targetElement1);
                              ScrollLockController$ScrollLockController.lock(match$1, targetElement1);
                              var __x = expect(Jest.MockJs.calls(Caml_option.valFromOption(match)).length);
                              return Jest.Expect.toBe(2, __x);
                            }));
                      return Jest.test("Isn't called multiple times after locking multiple elements", (function (param) {
                                    var match = mockOnBodyScrollLockRef.contents;
                                    var match$1 = scrollLockControllerRef.contents;
                                    var match$2 = targetElement1Ref.contents;
                                    if (match === undefined) {
                                      return Jest.fail("Prepare stage failed");
                                    }
                                    if (match$1 === undefined) {
                                      return Jest.fail("Prepare stage failed");
                                    }
                                    if (match$2 === undefined) {
                                      return Jest.fail("Prepare stage failed");
                                    }
                                    var targetElement2 = document.createElement("div");
                                    ScrollLockController$ScrollLockController.lock(match$1, Caml_option.valFromOption(match$2));
                                    ScrollLockController$ScrollLockController.lock(match$1, targetElement2);
                                    var __x = expect(Jest.MockJs.calls(Caml_option.valFromOption(match)).length);
                                    return Jest.Expect.toBe(1, __x);
                                  }));
                    }));
      }));

var test = Jest.test;

var describe = Jest.describe;

var fail = Jest.fail;

var JExp;

export {
  test ,
  describe ,
  beforeEach$1 as beforeEach,
  fail ,
  mock ,
  expect ,
  JExp ,
  
}
/*  Not a pure module */
