// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Js_types from "rescript/lib/es6/js_types.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

var isServer = Js_types.test(window, /* Undefined */0);

var uniq = ((array) => [...new Set(array)]);

function isEmptyArray(array) {
  return array.length === 0;
}

function make(param) {
  return {
          contents: []
        };
}

function isEmpty(entity) {
  return entity.contents.length === 0;
}

function isExistingLock(entity, lock) {
  return entity.contents.some(function (entityLock) {
              return entityLock === lock;
            });
}

function add(entity, locks) {
  var uniqLocks = uniq(locks);
  var added = uniqLocks.filter(function (lock) {
        return !isExistingLock(entity, lock);
      });
  entity.contents = entity.contents.concat(added);
  return added;
}

function remove(entity, locks) {
  var removingLocksRef = {
    contents: uniq(locks)
  };
  var removedRef = {
    contents: []
  };
  entity.contents = entity.contents.filter(function (existingLock) {
        var removingLockIdx = removingLocksRef.contents.indexOf(existingLock);
        var isRemovingLock = removingLockIdx >= 0;
        var removedLocks = removingLocksRef.contents.splice(removingLockIdx, 1);
        removedRef.contents = removedRef.contents.concat(removedLocks);
        return !isRemovingLock;
      });
  return removingLocksRef.contents;
}

var LocksSet = {
  make: make,
  isEmpty: isEmpty,
  isExistingLock: isExistingLock,
  add: add,
  remove: remove
};

function make$1(onChage, defaultValue) {
  return {
          valueRef: {
            contents: defaultValue
          },
          onChange: onChage
        };
}

function set(entity, valueGetter) {
  var prevValue = entity.valueRef.contents;
  var newValue = valueGetter(prevValue);
  if (newValue !== prevValue) {
    entity.valueRef.contents = newValue;
    return Curry._1(entity.onChange, newValue);
  }
  
}

function get(entity) {
  return entity.valueRef.contents;
}

var TrackedValue = {
  make: make$1,
  set: set,
  get: get
};

var checkIsElementNode = ((node) => node instanceof Element);

function convertNodeToElement(node) {
  if (checkIsElementNode(node)) {
    return Caml_option.some(node);
  }
  
}

export {
  isServer ,
  uniq ,
  isEmptyArray ,
  LocksSet ,
  TrackedValue ,
  checkIsElementNode ,
  convertNodeToElement ,
  
}
/* isServer Not a pure module */
