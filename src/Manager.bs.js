// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Core$Scrollock from "./Core.bs.js";
import * as Scrollock__Helpers$Scrollock from "./Scrollock__Helpers.bs.js";

function preparePluginsHooks(pluginFactories) {
  var groupedPluginsHooks_onBodyScrollLock = [];
  var groupedPluginsHooks_onBodyScrollUnlock = [];
  var groupedPluginsHooks_onLockTargetsAdd = [];
  var groupedPluginsHooks_onLockTargetsRemove = [];
  var groupedPluginsHooks = {
    onBodyScrollLock: groupedPluginsHooks_onBodyScrollLock,
    onBodyScrollUnlock: groupedPluginsHooks_onBodyScrollUnlock,
    onLockTargetsAdd: groupedPluginsHooks_onLockTargetsAdd,
    onLockTargetsRemove: groupedPluginsHooks_onLockTargetsRemove
  };
  pluginFactories.forEach(function (pluginFactory) {
        var pluginHooks = Curry._1(pluginFactory, undefined);
        var onBodyScrollLock = pluginHooks.onBodyScrollLock;
        if (onBodyScrollLock !== undefined) {
          groupedPluginsHooks_onBodyScrollLock.push(onBodyScrollLock);
        }
        var onBodyScrollUnlock = pluginHooks.onBodyScrollUnlock;
        if (onBodyScrollUnlock !== undefined) {
          groupedPluginsHooks_onBodyScrollUnlock.push(onBodyScrollUnlock);
        }
        var onLockTargetsAdd = pluginHooks.onLockTargetsAdd;
        if (onLockTargetsAdd !== undefined) {
          groupedPluginsHooks_onLockTargetsAdd.push(onLockTargetsAdd);
        }
        var onLockTargetsRemove = pluginHooks.onLockTargetsRemove;
        if (onLockTargetsRemove !== undefined) {
          groupedPluginsHooks_onLockTargetsRemove.push(onLockTargetsRemove);
          return ;
        }
        
      });
  return groupedPluginsHooks;
}

function make(pluginsOpt, param) {
  var plugins = pluginsOpt !== undefined ? pluginsOpt : [];
  var groupedPluginsHooks = preparePluginsHooks(plugins);
  var onBodyScrollLock = Scrollock__Helpers$Scrollock.isEmptyArray(groupedPluginsHooks.onBodyScrollLock) ? undefined : (function (param) {
        groupedPluginsHooks.onBodyScrollLock.forEach(function (cb) {
              return Curry._1(cb, undefined);
            });
        
      });
  var onBodyScrollUnlock = Scrollock__Helpers$Scrollock.isEmptyArray(groupedPluginsHooks.onBodyScrollUnlock) ? undefined : (function (param) {
        groupedPluginsHooks.onBodyScrollUnlock.forEach(function (cb) {
              return Curry._1(cb, undefined);
            });
        
      });
  var onLockTargetsAdd = Scrollock__Helpers$Scrollock.isEmptyArray(groupedPluginsHooks.onLockTargetsAdd) ? undefined : (function (targetElements) {
        groupedPluginsHooks.onLockTargetsAdd.forEach(function (cb) {
              return Curry._1(cb, targetElements);
            });
        
      });
  var onLockTargetsRemove = Scrollock__Helpers$Scrollock.isEmptyArray(groupedPluginsHooks.onLockTargetsRemove) ? undefined : (function (targetElements) {
        groupedPluginsHooks.onLockTargetsRemove.forEach(function (cb) {
              return Curry._1(cb, targetElements);
            });
        
      });
  return {
          core: Core$Scrollock.make({
                onBodyScrollLock: onBodyScrollLock,
                onBodyScrollUnlock: onBodyScrollUnlock,
                onLockTargetsAdd: onLockTargetsAdd,
                onLockTargetsRemove: onLockTargetsRemove
              })
        };
}

function lock(it, targetElements) {
  return Core$Scrollock.lock(it.core, targetElements);
}

function unlock(it, targetElements) {
  return Core$Scrollock.unlock(it.core, targetElements);
}

function clear(it) {
  return Core$Scrollock.clear(it.core);
}

export {
  make ,
  lock ,
  unlock ,
  clear ,
  
}
/* Core-Scrollock Not a pure module */
