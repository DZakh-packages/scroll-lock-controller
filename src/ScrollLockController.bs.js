// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as BodyScrollLock from "body-scroll-lock";
import * as ScrollLockController_Helpers$ScrollLockController from "./ScrollLockController_Helpers.bs.js";

function make(onBodyScrollLock, onBodyScrollUnlock, onLockTargetsAdd, onLockTargetsRemove, param) {
  var locks = ScrollLockController_Helpers$ScrollLockController.LocksSet.make(undefined);
  var isLocked = ScrollLockController_Helpers$ScrollLockController.TrackedValue.make((function (newIsLocked) {
          if (newIsLocked) {
            if (onBodyScrollLock !== undefined) {
              return Curry._1(onBodyScrollLock, undefined);
            } else {
              return ;
            }
          } else if (onBodyScrollUnlock !== undefined) {
            return Curry._1(onBodyScrollUnlock, undefined);
          } else {
            return ;
          }
        }), false);
  return {
          locks: locks,
          isLocked: isLocked,
          onLockTargetsAdd: onLockTargetsAdd,
          onLockTargetsRemove: onLockTargetsRemove
        };
}

function isBodyScrollLocked(it) {
  return !ScrollLockController_Helpers$ScrollLockController.LocksSet.isEmpty(it.locks);
}

function lock(it, targetElements) {
  var added = ScrollLockController_Helpers$ScrollLockController.LocksSet.add(it.locks, targetElements);
  var hasAddedTargetElements = added.length > 0;
  added.forEach(function (targetElement) {
        BodyScrollLock.disableBodyScroll(targetElement, {
              reserveScrollBarGap: true
            });
        
      });
  ScrollLockController_Helpers$ScrollLockController.TrackedValue.set(it.isLocked, (function (param) {
          return isBodyScrollLocked(it);
        }));
  var match = it.onLockTargetsAdd;
  if (match !== undefined && hasAddedTargetElements) {
    return Curry._1(match, added);
  }
  
}

function unlock(it, targetElements) {
  var removed = ScrollLockController_Helpers$ScrollLockController.LocksSet.remove(it.locks, targetElements);
  var hasRemovedTargetElements = removed.length > 0;
  removed.forEach(function (targetElement) {
        BodyScrollLock.enableBodyScroll(targetElement);
        
      });
  ScrollLockController_Helpers$ScrollLockController.TrackedValue.set(it.isLocked, (function (param) {
          return isBodyScrollLocked(it);
        }));
  var match = it.onLockTargetsRemove;
  if (match !== undefined && hasRemovedTargetElements) {
    return Curry._1(match, removed);
  }
  
}

function clear(it) {
  return unlock(it, ScrollLockController_Helpers$ScrollLockController.LocksSet.getCurrentLocks(it.locks));
}

export {
  make ,
  lock ,
  unlock ,
  clear ,
  
}
/* body-scroll-lock Not a pure module */
