// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as BodyScrollLock from "body-scroll-lock";
import * as Scrollock__Helpers$Scrollock from "./Scrollock__Helpers.bs.js";

function isExistingLock(it, lock) {
  return it.contents.some(function (entityLock) {
              return entityLock === lock;
            });
}

function add(it, locks) {
  var uniqLocks = Scrollock__Helpers$Scrollock.uniq(locks);
  var added = uniqLocks.filter(function (lock) {
        return !isExistingLock(it, lock);
      });
  it.contents = it.contents.concat(added);
  return added;
}

function remove(it, locks) {
  var removingLocksRef = {
    contents: Scrollock__Helpers$Scrollock.uniq(locks)
  };
  var removedRef = {
    contents: []
  };
  it.contents = it.contents.filter(function (existingLock) {
        var removingLockIdx = removingLocksRef.contents.indexOf(existingLock);
        var isRemovingLock = removingLockIdx >= 0;
        var removedLocks = removingLocksRef.contents.splice(removingLockIdx, 1);
        removedRef.contents = removedRef.contents.concat(removedLocks);
        return !isRemovingLock;
      });
  return removedRef.contents;
}

function set(it, valueGetter) {
  var prevValue = it.valueRef.contents;
  var newValue = valueGetter(prevValue);
  if (newValue !== prevValue) {
    it.valueRef.contents = newValue;
    return Curry._1(it.onChange, newValue);
  }
  
}

function make(param) {
  var onBodyScrollUnlock = param.onBodyScrollUnlock;
  var onBodyScrollLock = param.onBodyScrollLock;
  var locks = {
    contents: []
  };
  var isLocked_valueRef = {
    contents: false
  };
  var isLocked_onChange = function (newIsLocked) {
    if (newIsLocked) {
      if (onBodyScrollLock !== undefined) {
        return Curry._1(onBodyScrollLock, undefined);
      } else {
        return ;
      }
    } else if (onBodyScrollUnlock !== undefined) {
      return Curry._1(onBodyScrollUnlock, undefined);
    } else {
      return ;
    }
  };
  var isLocked = {
    valueRef: isLocked_valueRef,
    onChange: isLocked_onChange
  };
  return {
          locks: locks,
          isLocked: isLocked,
          onLockTargetsAdd: param.onLockTargetsAdd,
          onLockTargetsRemove: param.onLockTargetsRemove
        };
}

function lock(it, targetElements) {
  var added = add(it.locks, targetElements);
  var hasAddedTargetElements = added.length > 0;
  added.forEach(function (targetElement) {
        BodyScrollLock.disableBodyScroll(targetElement, {
              reserveScrollBarGap: true
            });
        
      });
  set(it.isLocked, (function (param) {
          return !Scrollock__Helpers$Scrollock.isEmptyArray(it.locks.contents);
        }));
  var match = it.onLockTargetsAdd;
  if (match !== undefined && hasAddedTargetElements) {
    return Curry._1(match, added);
  }
  
}

function unlock(it, targetElements) {
  var removed = remove(it.locks, targetElements);
  var hasRemovedTargetElements = removed.length > 0;
  removed.forEach(function (targetElement) {
        BodyScrollLock.enableBodyScroll(targetElement);
        
      });
  set(it.isLocked, (function (param) {
          return !Scrollock__Helpers$Scrollock.isEmptyArray(it.locks.contents);
        }));
  var match = it.onLockTargetsRemove;
  if (match !== undefined && hasRemovedTargetElements) {
    return Curry._1(match, removed);
  }
  
}

function clear(it) {
  return unlock(it, it.locks.contents);
}

export {
  make ,
  lock ,
  unlock ,
  clear ,
  
}
/* body-scroll-lock Not a pure module */
